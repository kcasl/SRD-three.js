/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useRef, useEffect } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame, useThree } from "@react-three/fiber";
import { a } from "@react-spring/three";

import buildingScene from "../assets/3d/building.glb";


const Building = ({ isRotating, setIsRotating, setCurrentStage, ...props}) => {
  const buildingRef = useRef();

  const {gl, viewport} = useThree();
  const { nodes, materials } = useGLTF(buildingScene);

  const lastX = useRef(0);
  const rotationSpeed = useRef(0);
  const dampingFactor = 0.95;


  const handlePointerDown = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(true);

    const clientX = e.touches ? e.touches[0].clientX : e.clientX;

    lastX.current = clientX;
  };

  const handlePointerUp = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(false);
  };

  const handlePointerMove = (e) => {
    e.stopPropagation();
    e.preventDefault();
    if(isRotating) {       
        const clientX = e.touches ? e.touches[0].clientX : e.clientX;
        const delta = (clientX - lastX.current) / viewport.width;

        buildingRef.current.rotation.y += delta * 0.01 *  Math.PI;
        lastX.current = clientX;
        rotationSpeed.current = delta * 0.01 * Math.PI;
    }
  };

  const handleKeyDown = (event) => {
    if (event.key === "ArrowLeft") {
      if (!isRotating) setIsRotating(true);

      buildingRef.current.rotation.y += 0.005 * Math.PI;
      rotationSpeed.current = 0.007;
    } else if (event.key === "ArrowRight") {
      if (!isRotating) setIsRotating(true);

      buildingRef.current.rotation.y -= 0.005 * Math.PI;
      rotationSpeed.current = -0.007;
    }
  };

  const handleKeyUp = (event) => {
    if (event.key === "ArrowLeft" || event.key === "ArrowRight") {
      setIsRotating(false);
    }
  };

  useEffect(() => {
    const canvas = gl.domElement;
    canvas.addEventListener("pointerdown", handlePointerDown);
    canvas.addEventListener("pointermove", handlePointerMove);
    canvas.addEventListener("pointerup", handlePointerUp);
    document.addEventListener("keydown", handleKeyDown);
    document.addEventListener("keyup", handleKeyUp);

    return () => {
      canvas.removeEventListener("pointerdown", handlePointerDown);
      canvas.removeEventListener("pointermove", handlePointerMove);
      canvas.removeEventListener("pointerup", handlePointerUp);
      document.removeEventListener("keydown", handleKeyDown);
      document.removeEventListener("keyup", handleKeyUp);
    }
  }, [gl, handlePointerDown, handlePointerMove, handlePointerUp ]);


  useFrame(() => {
    if (!isRotating) {
      rotationSpeed.current *= dampingFactor;

      if (Math.abs(rotationSpeed.current) < 0.001) {
        rotationSpeed.current = 0;
      }

      buildingRef.current.rotation.y += rotationSpeed.current;
    } else {
      const rotation = buildingRef.current.rotation.y;

      const normalizedRotation = ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);

      switch (true) {
        case normalizedRotation >= 5.2 && normalizedRotation <= 6.1:
          setCurrentStage(4);
          break;
        case normalizedRotation >= 0.6 && normalizedRotation <= 1.55:
          setCurrentStage(3);
          break;
        case normalizedRotation >= 2.15 && normalizedRotation <= 2.85:
          setCurrentStage(2);
          break;
        case normalizedRotation >= 4 && normalizedRotation <= 5:
          setCurrentStage(1);
          break;
        default:
          setCurrentStage(null);
      }
    }
  });

  return (
    <a.group ref={buildingRef} {...props}>
      <group
        position={[0, 0, 0.415]}
        rotation={[Math.PI / 2, 0, 0]}
        scale={0.001}
      >
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Body17.geometry}
          material={materials["Steel - Satin"]}
          position={[-91.246, 0, -52.425]}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={100}
        />
      </group>
      <group position={[0, 0, 2.954]} scale={0.001}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Body1.geometry}
          material={materials["Steel - Satin.001"]}
          position={[-113.244, 1000, -2743.928]}
          scale={100}
        />
      </group>
      <group position={[-0.351, 0, -0.776]} scale={0.001}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Body4.geometry}
          material={materials["Steel - Satin.002"]}
          position={[267.52, 2000, 994.365]}
          scale={100}
        />
      </group>
      <group position={[-2.875, 0, 0.221]} scale={0.001}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Body4001.geometry}
          material={materials["Steel - Satin.003"]}
          position={[2799.761, 3000, 0]}
          scale={100}
        />
      </group>
      <group position={[-0.063, 0, 3.702]} scale={0.001}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Body13.geometry}
          material={materials["Steel - Satin.004"]}
          position={[0, 4000, -3456.126]}
          scale={100}
        />
      </group>
      <group
        position={[0, 0, 3.355]}
        rotation={[Math.PI, 0, Math.PI]}
        scale={0.001}
      >
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Body1001.geometry}
          material={materials["Steel - Satin.005"]}
          position={[59.535, 5000, 3102.983]}
          scale={100}
        />
      </group>
      <group position={[0, 0, -1.307]} scale={0.001}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Body2.geometry}
          material={materials["Steel - Satin.006"]}
          position={[-71.847, 6000, 1551.491]}
          rotation={[Math.PI, 0, Math.PI]}
          scale={100}
        />
      </group>
    </a.group>
  );
}

export default Building
